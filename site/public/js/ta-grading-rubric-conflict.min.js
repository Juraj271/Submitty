function getConflictMarkJQuery(e){return $("#mark-conflict-"+e)}function getConflictMarkIdFromDOMElement(e){return $(e).hasClass("mark-conflict-row")?parseInt($(e).attr("data-mark_id")):parseInt($(e).parents(".mark-conflict-row").attr("data-mark_id"))}function isMarkServerDeleted(e){return getConflictMarkJQuery(e).find(".mark-resolve-server").find(".mark-deleted-message").length>0}function anyUnresolvedConflicts(){return $("#mark-conflict-popup").find(".mark-conflict-row:not(.mark-resolved)").length>0}function getNumResolvedConflicts(){return $("#mark-conflict-popup").find(".mark-conflict-row.mark-resolved").length}function tagMarkConflictResolved(e){getConflictMarkJQuery(e).addClass("mark-resolved")}function showNextConflict(){$(".mark-conflict-row").hide(),$(".mark-conflict-row:not(.mark-resolved)").first().show(),$(".conflict-resolve-progress-indicator").text(getNumResolvedConflicts()+1)}function prepConflictMarks(e){for(let t in e)e.hasOwnProperty(t)&&(e[t].local_deleted=isMarkDeleted(parseInt(t)))}function openMarkConflictPopup(e,t){let n=getGradeableId(),r=$("#mark-conflict-popup");return r.find(".component-title").html(getComponentJQuery(e).attr("data-title")),prepConflictMarks(t),renderConflictMarks(t).then(function(o){return r.find(".conflict-marks-container").html(o),r.show(),new Promise(function(o,l){let i=function(e){tagMarkConflictResolved(e),anyUnresolvedConflicts()?showNextConflict():(r.hide(),o())};r.find(".mark-resolve-dom .btn").click(function(){let r=getConflictMarkIdFromDOMElement(this),o=t[r].domMark;Promise.resolve().then(function(){return t[r].local_deleted?ajaxDeleteMark(n,e,r).catch(function(e){alert("Could not delete mark: "+e.message)}):isMarkServerDeleted(r)?ajaxAddNewMark(n,e,o.title,o.points,o.publish).then(function(e){o.id=e.mark_id}):ajaxSaveMark(n,e,r,o.title,o.points,o.publish)}).then(function(){i(r)}).catch(function(e){console.error(e),alert("Failed to resolve conflict! "+e.message)})}),r.find(".mark-resolve-old-server .btn").click(function(){let r=getConflictMarkIdFromDOMElement(this),o=t[r].oldServerMark;ajaxSaveMark(n,e,r,o.title,o.points,o.publish).then(function(){i(r)}).catch(function(e){console.error(e),alert("Failed to resolve conflict! "+e.message)})}),r.find(".mark-resolve-server .btn").click(function(){i(getConflictMarkIdFromDOMElement(this))})})})}